loaded_model <- readRDS("models/BJH_Comments_grid_BMP_Base_XGB_current_with_deltas.rds")$model |> bundle::unbundle()
apd_pca <- readRDS("models/apd_pca.RDS")
train <- read.csv("data/train.csv")
pred_function <- function(object, newdata) {  as.numeric(as.character(predict(object, new_data = newdata)$.pred_class)) }
rec <- extract_recipe(loaded_model)
set.seed(12345)
ui <- fluidPage(
titlePanel(HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:64px; font-weight:bold; font-style:italic; color:black;'>FluidFlagger.ai </div>")), windowTitle = "FluidFlagger.ai"),
sidebarLayout(
sidebarPanel(
fluidRow(column(6, h3("Current Results"),
numericInput("sodium", "Sodium (mmol/L):", 145, min = 120, max = 180),
numericInput("chloride", "Chloride (mmol/L):", 116, min = 50, max = 140),
numericInput("potassium_plas", "Potassium_plas (mmol/L):", 2.9, min = 1, max = 10),
numericInput("co2_totl", "CO2_totl (mmol/L):", 18, min = 5),
numericInput("bun", "BUN (mg/dL):", 14, min = 0),
numericInput("creatinine", "Creatinine (mg/dL):", 0.6, min = 0),
numericInput("calcium", "Calcium (mg/dL):", 6.8, min = 3, max = 18),
numericInput("glucose", "Glucose (mg/dL):", 80, min = 10, max = 5000)
),
column(6, h3("Change from Prior"),
numericInput("sodium_delta_prior", "Δ Sodium:", 1),
numericInput("chloride_delta_prior", "Δ Chloride:", 18),
numericInput("potassium_plas_delta_prior", "Δ Potassium:", -1.5),
numericInput("co2_totl_delta_prior", "Δ CO2_totl:", -6),
numericInput("bun_delta_prior", "Δ BUN:", 0),
numericInput("creatinine_delta_prior", "Δ Creatinine:", 0),
numericInput("calcium_delta_prior", "Δ Calcium:", -2.2),
numericInput("glucose_delta_prior", "Δ Glucose:", -8)
)),
actionButton("predict", "Predict"),
width = 5
),
mainPanel(
uiOutput("finalPrediction", height = "15%"),
uiOutput("predictedProbability", height = "15%"),
uiOutput("predictionApplicability", height = "15%"),
plotOutput("shapPlot", height = 600),
width = 7
)
),
tags$footer(style = "position: fixed; bottom: 0; left: 0; width: 100%; background-color: lightgrey; color: black; text-align: center; font-size: 18pt; font-weight: bold; font-style: italic;",
"This application should NOT be used for clinical care. It is for research use only.")
)
server <- function(input, output, session) {
observeEvent(input$predict, {
input_data <- data.frame(
sodium = input$sodium,
chloride = input$chloride,
potassium_plas = input$potassium_plas,
co2_totl = input$co2_totl,
bun = input$bun,
creatinine = input$creatinine,
calcium = input$calcium,
glucose = input$glucose,
anion_gap = input$sodium - input$chloride - input$co2_totl,
sodium_delta_prior = input$sodium_delta_prior,
chloride_delta_prior = input$chloride_delta_prior,
potassium_plas_delta_prior = input$potassium_plas_delta_prior,
co2_totl_delta_prior = input$co2_totl_delta_prior,
bun_delta_prior = input$bun_delta_prior,
creatinine_delta_prior = input$creatinine_delta_prior,
calcium_delta_prior = input$calcium_delta_prior,
glucose_delta_prior = input$glucose_delta_prior,
anion_gap_delta_prior = input$sodium_delta_prior - input$chloride_delta_prior - input$co2_totl_delta_prior)
pred_time <- system.time({
# Get prediction and probability
pred <- ifelse(predict(loaded_model, input_data) %>% pluck(1) == 1, "Contaminated", "Not Contaminated")
prob <- round(predict(loaded_model, input_data, type = "prob") %>% select(.pred_1), digits = 3)
})[3]
print(paste("Prediction time:", pred_time, "seconds"))
apd_time <- system.time({
# Calculate applicability label
ood_label <- applicable::score(apd_pca, input_data) %>%
mutate(label = ifelse(distance_pctl > 99.5 | distance_pctl == 1, "Out-of-Distribution", "Applicable")) %>%
pluck("label")
})[3]
print(paste("Applicability time:", apd_time, "seconds"))
shap_plot_time <- system.time({
# Make Force Plot
shap_plot <- sv_waterfall(shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), X = as.matrix(train), which_class = 0, interactions = F), row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
})[3]
print(paste("SHAP plot time:", shap_plot_time, "seconds"))
# Display the results
output$finalPrediction <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:48px; font-weight:bold; color:darkgrey;'>Final Prediction:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic; font-weight:bold;'>",
pred, "</span></div>"))
})
output$predictedProbability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Probability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
prob, "</span></div>"))
})
output$predictionApplicability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Applicability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
ood_label, "</span></div>"))
})
output$shapPlot <- renderPlot({
shap_plot
})
})
}
shinyApp(ui, server)
shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
input_data
input_data = train[1,]
input_data
shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F) * -1
tmp <- shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input))
tmp = shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
tmp
tmp$S
tmp$S * -1
# Calculate SHAP values
shap <- shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(fastshap))
suppressPackageStartupMessages(library(shapviz))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(xgboost))
suppressPackageStartupMessages(library(tidymodels))
# Load the trained models
loaded_model <- readRDS("models/BJH_Comments_grid_BMP_Base_XGB_current_with_deltas.rds")$model |> bundle::unbundle()
apd_pca <- readRDS("models/apd_pca.RDS")
train <- read.csv("data/train.csv")
pred_function <- function(object, newdata) {  as.numeric(as.character(predict(object, new_data = newdata)$.pred_class)) }
rec <- extract_recipe(loaded_model)
set.seed(12345)
ui <- fluidPage(
titlePanel(HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:64px; font-weight:bold; font-style:italic; color:black;'>FluidFlagger.ai </div>")), windowTitle = "FluidFlagger.ai"),
sidebarLayout(
sidebarPanel(
fluidRow(column(6, h3("Current Results"),
numericInput("sodium", "Sodium (mmol/L):", 145, min = 120, max = 180),
numericInput("chloride", "Chloride (mmol/L):", 116, min = 50, max = 140),
numericInput("potassium_plas", "Potassium_plas (mmol/L):", 2.9, min = 1, max = 10),
numericInput("co2_totl", "CO2_totl (mmol/L):", 18, min = 5),
numericInput("bun", "BUN (mg/dL):", 14, min = 0),
numericInput("creatinine", "Creatinine (mg/dL):", 0.6, min = 0),
numericInput("calcium", "Calcium (mg/dL):", 6.8, min = 3, max = 18),
numericInput("glucose", "Glucose (mg/dL):", 80, min = 10, max = 5000)
),
column(6, h3("Change from Prior"),
numericInput("sodium_delta_prior", "Δ Sodium:", 1),
numericInput("chloride_delta_prior", "Δ Chloride:", 18),
numericInput("potassium_plas_delta_prior", "Δ Potassium:", -1.5),
numericInput("co2_totl_delta_prior", "Δ CO2_totl:", -6),
numericInput("bun_delta_prior", "Δ BUN:", 0),
numericInput("creatinine_delta_prior", "Δ Creatinine:", 0),
numericInput("calcium_delta_prior", "Δ Calcium:", -2.2),
numericInput("glucose_delta_prior", "Δ Glucose:", -8)
)),
actionButton("predict", "Predict"),
width = 5
),
mainPanel(
uiOutput("finalPrediction", height = "15%"),
uiOutput("predictedProbability", height = "15%"),
uiOutput("predictionApplicability", height = "15%"),
plotOutput("shapPlot", height = 600),
width = 7
)
),
tags$footer(style = "position: fixed; bottom: 0; left: 0; width: 100%; background-color: lightgrey; color: black; text-align: center; font-size: 18pt; font-weight: bold; font-style: italic;",
"This application should NOT be used for clinical care. It is for research use only.")
)
server <- function(input, output, session) {
observeEvent(input$predict, {
input_data <- data.frame(
sodium = input$sodium,
chloride = input$chloride,
potassium_plas = input$potassium_plas,
co2_totl = input$co2_totl,
bun = input$bun,
creatinine = input$creatinine,
calcium = input$calcium,
glucose = input$glucose,
anion_gap = input$sodium - input$chloride - input$co2_totl,
sodium_delta_prior = input$sodium_delta_prior,
chloride_delta_prior = input$chloride_delta_prior,
potassium_plas_delta_prior = input$potassium_plas_delta_prior,
co2_totl_delta_prior = input$co2_totl_delta_prior,
bun_delta_prior = input$bun_delta_prior,
creatinine_delta_prior = input$creatinine_delta_prior,
calcium_delta_prior = input$calcium_delta_prior,
glucose_delta_prior = input$glucose_delta_prior,
anion_gap_delta_prior = input$sodium_delta_prior - input$chloride_delta_prior - input$co2_totl_delta_prior)
pred_time <- system.time({
# Get prediction and probability
pred <- ifelse(predict(loaded_model, input_data) %>% pluck(1) == 1, "Contaminated", "Not Contaminated")
prob <- round(predict(loaded_model, input_data, type = "prob") %>% select(.pred_1), digits = 3)
})[3]
print(paste("Prediction time:", pred_time, "seconds"))
apd_time <- system.time({
# Calculate applicability label
ood_label <- applicable::score(apd_pca, input_data) %>%
mutate(label = ifelse(distance_pctl > 99.5 | distance_pctl == 1, "Out-of-Distribution", "Applicable")) %>%
pluck("label")
})[3]
print(paste("Applicability time:", apd_time, "seconds"))
shap_time <- system.time({
# Calculate SHAP values
shap <- shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- shap$S * -1
})[3]
print(paste("SHAP time:", shap_time, "seconds"))
shap_plot_time <- system.time({
# Make Force Plot
shap_plot <- sv_waterfall(shap, row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
})[3]
print(paste("SHAP plot time:", shap_plot_time, "seconds"))
# Display the results
output$finalPrediction <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:48px; font-weight:bold; color:darkgrey;'>Final Prediction:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic; font-weight:bold;'>",
pred, "</span></div>"))
})
output$predictedProbability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Probability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
prob, "</span></div>"))
})
output$predictionApplicability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Applicability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
ood_label, "</span></div>"))
})
output$shapPlot <- renderPlot({
shap_plot
})
})
}
shinyApp(ui, server)
shap$S * -1
shap <- shapviz::shapviz(shap$S * -1)
# Calculate SHAP values
shap <- shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- shap$S * -1
shap
shap <- as.matrix(shap$S * -1)
# Calculate SHAP values
shap <- shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- as.matrix(shap$S * -1)
# Make Force Plot
shap_plot <- sv_waterfall(shap, row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
# Make Force Plot
shap_plot <- sv_waterfall(shapviz(shap), row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
shap
# Make Force Plot
shap_plot <- sv_waterfall(shapviz(shap), row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
runApp()
shap <- shapviz(as.matrix(shap$S * -1))
# Calculate SHAP values
shap <- shapviz::shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- shapviz(as.matrix(shap$S * -1))
mshapviz()
shapviz()
shapviz(shap, input_data)
# Calculate SHAP values
shap <- shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- shapviz(as.matrix(shap$S * -1))
# Calculate SHAP values
shap <- shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- as.matrix(shap$S * -1)
# Make Force Plot
shap_plot <- sv_waterfall(shap, row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
shap
shapviz(shap, input_data)
# Make Force Plot
shap_plot <- sv_waterfall(shapviz(shap, input_data), row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(fastshap))
suppressPackageStartupMessages(library(shapviz))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(xgboost))
suppressPackageStartupMessages(library(tidymodels))
# Load the trained models
loaded_model <- readRDS("models/BJH_Comments_grid_BMP_Base_XGB_current_with_deltas.rds")$model |> bundle::unbundle()
apd_pca <- readRDS("models/apd_pca.RDS")
train <- read.csv("data/train.csv")
pred_function <- function(object, newdata) {  as.numeric(as.character(predict(object, new_data = newdata)$.pred_class)) }
rec <- extract_recipe(loaded_model)
set.seed(12345)
ui <- fluidPage(
titlePanel(HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:64px; font-weight:bold; font-style:italic; color:black;'>FluidFlagger.ai </div>")), windowTitle = "FluidFlagger.ai"),
sidebarLayout(
sidebarPanel(
fluidRow(column(6, h3("Current Results"),
numericInput("sodium", "Sodium (mmol/L):", 145, min = 120, max = 180),
numericInput("chloride", "Chloride (mmol/L):", 116, min = 50, max = 140),
numericInput("potassium_plas", "Potassium_plas (mmol/L):", 2.9, min = 1, max = 10),
numericInput("co2_totl", "CO2_totl (mmol/L):", 18, min = 5),
numericInput("bun", "BUN (mg/dL):", 14, min = 0),
numericInput("creatinine", "Creatinine (mg/dL):", 0.6, min = 0),
numericInput("calcium", "Calcium (mg/dL):", 6.8, min = 3, max = 18),
numericInput("glucose", "Glucose (mg/dL):", 80, min = 10, max = 5000)
),
column(6, h3("Change from Prior"),
numericInput("sodium_delta_prior", "Δ Sodium:", 1),
numericInput("chloride_delta_prior", "Δ Chloride:", 18),
numericInput("potassium_plas_delta_prior", "Δ Potassium:", -1.5),
numericInput("co2_totl_delta_prior", "Δ CO2_totl:", -6),
numericInput("bun_delta_prior", "Δ BUN:", 0),
numericInput("creatinine_delta_prior", "Δ Creatinine:", 0),
numericInput("calcium_delta_prior", "Δ Calcium:", -2.2),
numericInput("glucose_delta_prior", "Δ Glucose:", -8)
)),
actionButton("predict", "Predict"),
width = 5
),
mainPanel(
uiOutput("finalPrediction", height = "15%"),
uiOutput("predictedProbability", height = "15%"),
uiOutput("predictionApplicability", height = "15%"),
plotOutput("shapPlot", height = 600),
width = 7
)
),
tags$footer(style = "position: fixed; bottom: 0; left: 0; width: 100%; background-color: lightgrey; color: black; text-align: center; font-size: 18pt; font-weight: bold; font-style: italic;",
"This application should NOT be used for clinical care. It is for research use only.")
)
server <- function(input, output, session) {
observeEvent(input$predict, {
input_data <- data.frame(
sodium = input$sodium,
chloride = input$chloride,
potassium_plas = input$potassium_plas,
co2_totl = input$co2_totl,
bun = input$bun,
creatinine = input$creatinine,
calcium = input$calcium,
glucose = input$glucose,
anion_gap = input$sodium - input$chloride - input$co2_totl,
sodium_delta_prior = input$sodium_delta_prior,
chloride_delta_prior = input$chloride_delta_prior,
potassium_plas_delta_prior = input$potassium_plas_delta_prior,
co2_totl_delta_prior = input$co2_totl_delta_prior,
bun_delta_prior = input$bun_delta_prior,
creatinine_delta_prior = input$creatinine_delta_prior,
calcium_delta_prior = input$calcium_delta_prior,
glucose_delta_prior = input$glucose_delta_prior,
anion_gap_delta_prior = input$sodium_delta_prior - input$chloride_delta_prior - input$co2_totl_delta_prior)
pred_time <- system.time({
# Get prediction and probability
pred <- ifelse(predict(loaded_model, input_data) %>% pluck(1) == 1, "Contaminated", "Not Contaminated")
prob <- round(predict(loaded_model, input_data, type = "prob") %>% select(.pred_1), digits = 3)
})[3]
print(paste("Prediction time:", pred_time, "seconds"))
apd_time <- system.time({
# Calculate applicability label
ood_label <- applicable::score(apd_pca, input_data) %>%
mutate(label = ifelse(distance_pctl > 99.5 | distance_pctl == 1, "Out-of-Distribution", "Applicable")) %>%
pluck("label")
})[3]
print(paste("Applicability time:", apd_time, "seconds"))
shap_time <- system.time({
# Calculate SHAP values
shap <- shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- as.matrix(shap$S * -1)
})[3]
print(paste("SHAP time:", shap_time, "seconds"))
shap_plot_time <- system.time({
# Make Force Plot
shap_plot <- sv_waterfall(shapviz(shap, input_data), row_id = 1, size = 16, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
})[3]
print(paste("SHAP plot time:", shap_plot_time, "seconds"))
# Display the results
output$finalPrediction <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:48px; font-weight:bold; color:darkgrey;'>Final Prediction:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic; font-weight:bold;'>",
pred, "</span></div>"))
})
output$predictedProbability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Probability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
prob, "</span></div>"))
})
output$predictionApplicability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Applicability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
ood_label, "</span></div>"))
})
output$shapPlot <- renderPlot({
shap_plot
})
})
}
shinyApp(ui, server)
# Make Force Plot
shap_plot <- sv_waterfall(shapviz(shap, input_data), row_id = 1, size = 0, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(fastshap))
suppressPackageStartupMessages(library(shapviz))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(xgboost))
suppressPackageStartupMessages(library(tidymodels))
# Load the trained models
loaded_model <- readRDS("models/BJH_Comments_grid_BMP_Base_XGB_current_with_deltas.rds")$model |> bundle::unbundle()
apd_pca <- readRDS("models/apd_pca.RDS")
train <- read.csv("data/train.csv")
pred_function <- function(object, newdata) {  as.numeric(as.character(predict(object, new_data = newdata)$.pred_class)) }
rec <- extract_recipe(loaded_model)
set.seed(12345)
ui <- fluidPage(
titlePanel(HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:64px; font-weight:bold; font-style:italic; color:black;'>FluidFlagger.ai </div>")), windowTitle = "FluidFlagger.ai"),
sidebarLayout(
sidebarPanel(
fluidRow(column(6, h3("Current Results"),
numericInput("sodium", "Sodium (mmol/L):", 145, min = 120, max = 180),
numericInput("chloride", "Chloride (mmol/L):", 116, min = 50, max = 140),
numericInput("potassium_plas", "Potassium_plas (mmol/L):", 2.9, min = 1, max = 10),
numericInput("co2_totl", "CO2_totl (mmol/L):", 18, min = 5),
numericInput("bun", "BUN (mg/dL):", 14, min = 0),
numericInput("creatinine", "Creatinine (mg/dL):", 0.6, min = 0),
numericInput("calcium", "Calcium (mg/dL):", 6.8, min = 3, max = 18),
numericInput("glucose", "Glucose (mg/dL):", 80, min = 10, max = 5000)
),
column(6, h3("Change from Prior"),
numericInput("sodium_delta_prior", "Δ Sodium:", 1),
numericInput("chloride_delta_prior", "Δ Chloride:", 18),
numericInput("potassium_plas_delta_prior", "Δ Potassium:", -1.5),
numericInput("co2_totl_delta_prior", "Δ CO2_totl:", -6),
numericInput("bun_delta_prior", "Δ BUN:", 0),
numericInput("creatinine_delta_prior", "Δ Creatinine:", 0),
numericInput("calcium_delta_prior", "Δ Calcium:", -2.2),
numericInput("glucose_delta_prior", "Δ Glucose:", -8)
)),
actionButton("predict", "Predict"),
width = 5
),
mainPanel(
uiOutput("finalPrediction", height = "15%"),
uiOutput("predictedProbability", height = "15%"),
uiOutput("predictionApplicability", height = "15%"),
plotOutput("shapPlot", height = 600),
width = 7
)
),
tags$footer(style = "position: fixed; bottom: 0; left: 0; width: 100%; background-color: lightgrey; color: black; text-align: center; font-size: 18pt; font-weight: bold; font-style: italic;",
"This application should NOT be used for clinical care. It is for research use only.")
)
server <- function(input, output, session) {
observeEvent(input$predict, {
input_data <- data.frame(
sodium = input$sodium,
chloride = input$chloride,
potassium_plas = input$potassium_plas,
co2_totl = input$co2_totl,
bun = input$bun,
creatinine = input$creatinine,
calcium = input$calcium,
glucose = input$glucose,
anion_gap = input$sodium - input$chloride - input$co2_totl,
sodium_delta_prior = input$sodium_delta_prior,
chloride_delta_prior = input$chloride_delta_prior,
potassium_plas_delta_prior = input$potassium_plas_delta_prior,
co2_totl_delta_prior = input$co2_totl_delta_prior,
bun_delta_prior = input$bun_delta_prior,
creatinine_delta_prior = input$creatinine_delta_prior,
calcium_delta_prior = input$calcium_delta_prior,
glucose_delta_prior = input$glucose_delta_prior,
anion_gap_delta_prior = input$sodium_delta_prior - input$chloride_delta_prior - input$co2_totl_delta_prior)
pred_time <- system.time({
# Get prediction and probability
pred <- ifelse(predict(loaded_model, input_data) %>% pluck(1) == 1, "Contaminated", "Not Contaminated")
prob <- round(predict(loaded_model, input_data, type = "prob") %>% select(.pred_1), digits = 3)
})[3]
print(paste("Prediction time:", pred_time, "seconds"))
apd_time <- system.time({
# Calculate applicability label
ood_label <- applicable::score(apd_pca, input_data) %>%
mutate(label = ifelse(distance_pctl > 99.5 | distance_pctl == 1, "Out-of-Distribution", "Applicable")) %>%
pluck("label")
})[3]
print(paste("Applicability time:", apd_time, "seconds"))
shap_time <- system.time({
# Calculate SHAP values
shap <- shapviz(extract_fit_engine(loaded_model), X_pred = as.matrix(input_data %>% select(-matches("anion"))), interactions = F)
shap <- as.matrix(shap$S * -1)
})[3]
print(paste("SHAP time:", shap_time, "seconds"))
shap_plot_time <- system.time({
# Make Force Plot
shap_plot <- sv_waterfall(shapviz(shap, input_data), row_id = 1, size = 0, max_display = 10, show_annotation = F, format_shap = function(z) prettyNum(z, digits = 2, scientific = F, format = "fg"), fill_colors = c("darkred", "tan")) +
ggtitle("Contributions to Prediction by Feature") + theme(plot.margin = margin(48, 0, 0, 0), plot.title = element_text(size = 36, hjust = 0.5, face = "bold", color = "darkgray"), axis.text = element_text(face = "bold", size = 18), axis.title = element_text(face = "bold.italic", size = 24))
})[3]
print(paste("SHAP plot time:", shap_plot_time, "seconds"))
# Display the results
output$finalPrediction <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:48px; font-weight:bold; color:darkgrey;'>Final Prediction:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic; font-weight:bold;'>",
pred, "</span></div>"))
})
output$predictedProbability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Probability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
prob, "</span></div>"))
})
output$predictionApplicability <- renderUI({
HTML(paste("<div style='width:100%; height:100%; display: flex; align-items: center; justify-content: left; font-size:24px; font-weight:bold; color:darkgrey;'>Applicability:&nbsp&nbsp <span style='font-weight:normal; color:black; font-style:italic;'>",
ood_label, "</span></div>"))
})
output$shapPlot <- renderPlot({
shap_plot
})
})
}
shinyApp(ui, server)
library(tidyverse)
renv::status()
